version: 2.1

executors:
  macos:
    macos:
      xcode: 11.1.0
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1

commands:
  install_macos_dependencies:
    steps:
      - run: brew install protobuf cmake libtool boost-python libspatialite pkg-config lua curl wget czmq lz4 spatialite-tools unzip
      - run:
          name: Install Node
          command: |
            set +e
            touch $BASH_ENV
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            echo 'nvm install v8.11.2' >> $BASH_ENV
            echo 'nvm alias default v8.11.2' >> $BASH_ENV

jobs:
  build-base:
    docker:
      # Note, this is the primary container and circleci builds the valhalla images
      # _inside_ this primary. (docker-inside-docker). That implies we don't really care
      # about what the primary container is as long as docker is installed
      - image: docker:19.03-git
    steps:
      - setup_remote_docker:
        docker_layer_caching: true
      - checkout
      - restore_cache:
          keys:
            - ccache
      - run:
          name: Fetch existing images
          command: |
              docker pull valhalla/docker:build-3.0.2
              docker pull valhalla/docker:build-x86-3.0.2
      - run:
          name: Build Valhalla base Dockerfile
          command: |
            docker build -f ./docker/Dockerfile-build --tag valhalla/docker:build-latest ./docker
      - run:
          name: Build Valhalla base Dockerfile x86
          command: |
            docker build -f ./docker/Dockerfile-build-x86 --tag valhalla/docker:build-x86-latest ./docker
      - save_cache:
          key: ccache
          paths:
            - ~/.ccache


  lint-build-debug:
    docker:
      # Note, this is the primary container and circleci builds the valhalla images
      # _inside_ this primary. (docker-inside-docker). That implies we don't really care
      # about what the primary container is as long as docker is installed
      - image: docker:19.03-git
    steps:
      - run: ./scripts/format.sh && ./scripts/error_on_dirty.sh
      - run: git submodule sync && git submodule update --init
      - restore_cache:
          keys:
            - ccache
      - run: npm install --ignore-scripts
      - run: mkdir build
      - run: cd build && cmake .. -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=On -DCPACK_GENERATOR=DEB -DENABLE_COMPILER_WARNINGS=On -DCMAKE_EXPORT_COMPILE_COMMANDS=On
      - run: make -C build -j4
      - run: scripts/clang-tidy-only-diff.sh
      - run: make -C build -j4 tests
      - run: make -C build -j2 check
      - run: make -C build install
      - run: make -C build package
      - run: make -C build coverage
      - run: /bin/bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
      - save_cache:
          key: ccache
          paths:
            - ~/.ccache
      # after we are sure the tests are passing, lets push Docker image.
      # we want to do it only for 'master' branch
      - push_docker_image:
          requires:
            - test
          filters:
            branches:
              only: master


  build-osx:
    executor: macos
    steps:
      - install_macos_dependencies
      - checkout
      - run: ./scripts/format.sh && ./scripts/error_on_dirty.sh
      - run: git submodule sync && git submodule update --init
      # - restore_cache:
      #     keys:
      #       - ccache
      - run: wget https://raw.githubusercontent.com/valhalla/homebrew-valhalla/master/Formula/prime_server.rb
      - run: brew install --build-from-source ./prime_server.rb
      - run: npm install --ignore-scripts
      - run: mkdir -p build
      - run: cd build && cmake .. -DENABLE_PYTHON_BINDINGS=Off
      - run: make -C build -j4
      - run: make -C build -j4 tests
      - run: make -C build -j2 check
      - save_cache:
          key: ccache
          paths:
            - ~/.ccache

workflows:
  version: 2
  build_test_publish:
    jobs:
      - build-base
      - lint-build-debug:
          requires:
            - build-base
      - build-osx:
          requires:
            - build-base
